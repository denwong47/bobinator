window.SIDEBAR_ITEMS = {"constant":[["CALENDAR_WIDTH","The expected width of the calender on screen."]],"enum":[["APITokenScope","API token scope item."],["ApprovalState","Approval State of any requests, such as time off."],["BobinatorError","Enum class representing all the possible failure modes in Bobinator."],["DatePortion","The part of the day that the timeoff is applicable to."],["DateRangeType","The kind of range being used."],["RequestRangeType","Units for the timeoff request range. This is supported only for policy types measured in hours."],["TimeoffPolicyType","Policy Type for mapping the Holiday Balance."],["UserInput","User Input Options."],["ValidationMessages","Validation Messages from API end points such as Calculate Timeouts."]],"fn":[["flush_stdout","Flushing everything in the buffer of stdout, ensure that everything is printed to screen up to this point."]],"mod":[["app","Commmand Line App Interface Functions."],["bob","Abstractions for making API calls to bob."],["consts","Module for storing all the constants and static instances."],["employee","Module containing all the structs and eunms relating to the [`Employee`] struct."]],"struct":[["APIToken","An API Token, together with scope information."],["APITokenOnly","An bare API Token with no scopes attached."],["CalculateTimeoffResponse","Response from `calculateTimeOff` endpoint."],["Connection","A static struct that provides convenient functions to create [`reqwest::Client`] instances."],["Credentials","A set of login credentials to send to the server."],["DateRange","A Date Range object used commonly in time off requests."],["Employee","Metadata about an Employee; it could be the session owner or colleagues."],["Headers","Constructs headers using the default of:"],["LoginSession","Parse data returned from POST /api/login endpoint."],["Metadata","A “metadata” object returned by an API endpoint."],["Timeoff","A struct representing a single timeoff received from bob."],["TimeoffRequest","Construct a JSON for requesting time off."],["UnexpectedError","The default unexpected error format returned by Bob."],["ValidationMessage","One member of `messages` in [`ValidationMessages`]"],["WeekdayInterval","A struct grouping together staticmethods about Fridays."],["WeekdayIntervalIter","An [`Iterator`] struct, created by [`WeekdayInterval`]."]],"trait":[["CalendarMonthShiftModifier","Trait for shifting the cursor to the line of the relevant date."],["CanEnquireEmployee","A trait indicating the struct carries information to query for an [`Employee`] object."],["Capitalise","Trait to allow turning a string Capitalised."],["FindDate","A trait to allow a [`NaiveDate`] to be looked up. Returns [`Some<T>`] if found, [`None`] otherwise."],["HasDate","A trait indicating the struct has an associated date."],["HasDateRange","A trait indicating the struct has an associated range of dates."],["HasEmployeeId","A trait indicating the struct has an employee ID."],["HasToken","A trait indicating the struct can return a token key."],["JoinString","Public trait for joining an [`Iterator`] of [`ToString`] together with separator."],["TitleCase","Trait to allow turning a string Title Case."]],"type":[["FridayOff","Type Alias for Bi-weekly Friday offs."]]};